h1. Mongoid geo

A Geo extension for Mongoid. 

"MongoDB Geospatial Indexing":http://www.mongodb.org/display/DOCS/Geospatial+Indexing

* Supports Mongoid 1.7 sphere distance calculations and 
* Adds nearSphere inclusion method
* Adds a set of geo related inflections
* Adds an exta option for defining a "geo" field, to have the generated attr_writer parse and convert strings etc. to float arrays.

h2. Mongoid 2 geo features

h3. Find addresses near a point

<pre>
  Address.near(:latlng => [37.761523, -122.423575, 1])
</pre>

h3. Find locations within a circle

<pre>
  base.where(:location.within => { "$center" => [ [ 50, -40 ], 1 ] })  
</pre>

h3. Create geo-spatial index

<pre>
  class Person
    field :locations, :type => Array
    index [[ :locations, Mongo::GEO2D ]], :min => -180, :max => 180      
  end

  # to ensure indexes are created, either:
  Mongoid.autocreate_indexes = true

  # or in the mongoid.yml
  autocreate_indexes: true  
</pre>

These are the only geo features I could find are currently built-in for Mongoid 2. 
_Mongoid Geo_ implements the following extra features...

h1. Mongoid Geo features

The following briefly demonstrates all the features that Mongoid Geo currently provides

h2. Geo index

Old/Manual way: @index [[ :locations, Mongo::GEO2D ]], :min => -180, :max => 180@

Using new _geo_index_ class method : @geo_index :locations@

h2. Special geo-array attribute writer 

When setting a geo-location array, the setter should try to convert the value to an array of floats 

Old/Manual way:

<pre>
  class Person
    field :locations, :type => Array

    def locations= args
      @locations = args.kind_of?(String) ? args.split(",").map(&:to_f) : args
    end
  end  
</pre>

With the new @:geo@ option supplied by _mongoid-geo_ :

<pre>
  class Person
    field :locations, :type => Array, :geo => true
    
    geo_index :locations
  end  
  
   p = Person.new
   # set via String or Strings
   p.locations = "45.1, -3.4"
   p.locations = "45.1", "-3.4"   

   assert([45.1, -3.4], p.locations)   
</pre>


h2. Mongoid Geo extra inclusions

Find addresses near a point using spherical distance calculation

<pre>
  Address.nearSphere(:locations => [ 72, -44 ])
</pre>


h2. Mongoid Geo extra inflections

h3. nearSphere

<pre>
  base.where(:locations.nearSphere => [ 72, -44 ])
  # => :locations => { "$nearSphere" : [ 72, -44 ] }
</pre>

h3. nearMax

Find all addresses near a point using spherical distance calculation

<pre>
  base.where(:locations.nearMax => [[ 72, -44 ], 5])
  # => { $near: [50, 40] , $maxDistance: 3 }

  base.where(:locations.nearMax(:sphere) => [[ 72, -44 ], 5])
  # => { $nearSphere: [50, 40] , $maxDistanceSphere: 3 }
</pre>

h3. withinBox

<pre>
  box = [[50, 40], [30,55]]
  base.where(:locations.withinBox => box)
  # => locations: {"$within" : {"$box" : box}

  base.where(:locations.withinBox(:sphere) => box)
  # => locations: {"$within" : {"$boxSphere" : box}
</pre>

You can also use a Hash to define the box

<pre> 
  places.where(:location.withinBox => {:lower_left => [50, 40], :upper_right => [30,55]})  
</pre>

Or use an Object (which must have the methods #lower_left and #upper_right that return the points of the bounding box)

<pre>
  box = (Struct.new :lower_left, :upper_right).new
  box.lower_left = [50, 40]
  box.upper_right = [30,55]  
  places.where(:location.withinBox => box)  
</pre>

h3. withinCenter

<pre>
  center = [50, 40]
  radius = 4
  
  # places: {"$within" : {"$centerSphere" : [center, radius]}  
  places.where(:location.withinCenter(:sphere) => [center, radius])  

  # places: {"$within" : {"$center" : [center, radius]}
  places.where(:location.withinCenter => [center, radius])  
</pre>

You can also use a Hash to define the box

<pre> 
  places.where(:location.withinCenter => {:center => [50, 40], :radius => 4})  
</pre>

Or use an Object (which must have the methods #lower_left and #upper_right that return the points of the bounding box)

<pre>
  circle = (Struct.new :center, :radius).new
  circle.center = [50, 40]
  circle.radius = 4
  places.where(:location.withinCenter => circle)  
</pre>
